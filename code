#include <LiquidCrystal.h>//LCD library
LiquidCrystal lcd(7, 6, 5, 4, 3, 2);//lcd(RS,En,D4,D5,D6,D7)

#define PIR_SENSOR      A0 //pir sensor(pins:1)

#define LDR_SENSOR      A1

//ultrasonic sensor(pins:2)
#define ULT_TRIG        A2
#define ULT_ECHO        A3

#define GAS_SENSOR      A4//

#define HT_SENSOR       A5//humidity and temperature sensor(pins:1)

//leds(pins:5)
#define HT_LED          8
#define LDR_LED         9
#define ULT_LED         10
#define BUZZER          11// for ultrasonic sensor
#define GAS_LED         12
#define PIR_LED         13

void setup() {
  Serial.begin(9600);   // opens serial port, sets data rate to 9600 (baud)bps
  lcd.begin(16, 2);
  lcd.clear();
  // set sensor pins as inputs
  for (int i = PIR_SENSOR; i <= HT_SENSOR; i++)
    pinMode(i, INPUT);
  //set trigger pin as output
  pinMode(ULT_TRIG, OUTPUT);
  // set led pins as output
  for (int i = HT_LED; i <= PIR_LED; i++)
    pinMode(i, OUTPUT);

  // print sensor name on the LCD
  lcd.setCursor(0, 0);
  lcd.print("US=  ");//Ultrasonic Sensor data will be displayed at(8,0)
  lcd.print("GS=   ");//Gas Sensor data will be displayed at(14,0)
  lcd.print("HS=  ");//LDR Sensor data will be displayed at(15,0)
  lcd.setCursor(0, 1);// Move cursor to the next line of LCD
  lcd.print("PS=     ");//PIR Sensor data will be displayed at(3,1)
  lcd.print("LD=  "); 
}

void loop() {
  //distance measurement using Ultrasonic Sensor
  us_Readings();
  //read values from gas sensor
  gas_Readings();
  //read values from LDR sensor
  LDR_Readings();
  //read analog values from pir sensor
  pir_Readings();
 
  ht_Readings();	
}


void us_Readings() {
  long  duration;
  int distance;
  duration = time_Measurement(duration);
  distance = (int)duration * (0.0343) / 2;

  if (distance > 99 || distance < 0)//If distance is negative or greater than 99, then always show distance =0
    distance = 0;

  display_distance(distance);
}

//uncomment when using GAS Sensor
void gas_Readings() {
  int x = analogRead(GAS_SENSOR);
  lcd.setCursor(8, 0);
  lcd.print(x);
  Serial.print("GS=");
  Serial.print(x);
 // Serial.print("\t");

   //Gas Sensor input condition for Led to glow
  if (x >= 400)
    digitalWrite(GAS_LED, HIGH);
  else
    digitalWrite(GAS_LED, LOW);
  }

//uncomment when using LDR Sensor
void LDR_Readings() {
  int x = analogRead(LDR_SENSOR);
  lcd.setCursor(11, 1);
  lcd.print(x);
  Serial.print("LD=");
  Serial.print(x);
  //  Serial.print("\t");

  //LDR Sensor input condition for Led to glow
	
  	analogWrite(LDR_LED, map(x, 0, 1023, 0, 255));
  	
	if(x < 500)
    {
    	analogWrite(LDR_LED, LOW);
    }
}

void pir_Readings() {
  int x = digitalRead(PIR_SENSOR);
  lcd.setCursor(3, 1);
  lcd.print(x);
  Serial.print("PS=");
  Serial.print(x);
  Serial.print("\t");

  ////PIR Sensor input condition for Led to glow
  if (x == 1) {
    digitalWrite(PIR_LED, HIGH);
  }
  else {
    digitalWrite(PIR_LED, LOW);
  }
  delay(10);
}

void ht_Readings() {
	float value = analogRead(HT_SENSOR)*0.004882814;
  	value = (value - 0.5) * 100.0;
  	lcd.setCursor(14,0);
	lcd.print("");
  	lcd.print(value);
  
  if (value > 38)
    digitalWrite(HT_LED, HIGH);
  else
    digitalWrite(HT_LED, LOW);
  
 	delay(1000);
}

int time_Measurement(int duration)
{

  digitalWrite(ULT_TRIG, LOW);
  delayMicroseconds(2);

  digitalWrite(ULT_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(ULT_TRIG, LOW);

  duration = pulseIn(ULT_ECHO, HIGH);
  return duration;
}

void display_distance(int distance)
{
  lcd.setCursor(3, 0);
  if (distance < 10) {
    lcd.print(0);
  }
  lcd.print(distance);
  Serial.print("US=");
  Serial.print(distance);
//  Serial.print("\t");

  //distance condition for Led to glow
  if (1 <= distance && distance <= 20) {
    digitalWrite(ULT_LED, HIGH);
    tone(BUZZER, 2000);
  }
  else {
    digitalWrite(ULT_LED, LOW);
    noTone(BUZZER);
  }

  delay(10);
}
  
